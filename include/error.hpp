#ifndef INCLUDE_ERROR_H
#define INCLUDE_ERROR_H

#include <openssl/err.h>
#include <iostream>

namespace crpt {

class Error {
    private:
        /**
         * @brief A pointer to the preferred ostream to write internal library errors to. Default is std::cerr.
         */
        static std::ostream* err_ostream;
    
    public:
        /**
         * @brief Sets the ostream to write internal library errors to.
         * 
         * @param o The ostream to use.
         */
        static inline void set_err_ostream(std::ostream* o) {
            err_ostream = o;
        }

        /**
         * @brief Removes the latest OpenSSL error from the stack and writes its error message to the provided error ostream (default std::cerr). For internal use. See man ERR_error_string & man ERR_get_error
         * 
         * @param function_name This library uses colon-space separated error specifiers. Where possible, the prefix should be the function causing the error, E.g: If a call to EVP_CIPHER_fetch() returns an error code, setting the prefix to 'EVP_CIPHER_fetch' will produce an output of the form 'crypt: openssl: EVP_CIPHER_fetch: [the error message generated by ERR_error_string()]'.
         */
        static inline void openssl_err_out(std::string function_name = "") {
            auto err_code = ERR_get_error();
            auto err_buf = ERR_error_string(err_code, nullptr);
            *err_ostream << "crypt: openssl: " << (function_name != "" ? function_name + ": " : "") << err_buf << std::endl;
        }

        /**
         * @brief Writes an internal library error to err_ostream. External library users are encouraged to set err_ostream to their desired error-logging destination/handler, but not to use err_out() or Error::openssl_err_out(), as these are intended to produce internal library error messages.
         * 
         * @param error The error message to write to err_ostream.
         */
        static inline void err_out(std::string error) {
            *err_ostream << "crypt: " << error;
        }
};

}

#endif