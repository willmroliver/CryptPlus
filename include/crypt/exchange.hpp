#ifndef INCLUDE_EXCHANGE_H
#define INCLUDE_EXCHANGE_H

#include <string>
#include <utility>
#include <openssl/obj_mac.h>
#include "pkey-context.hpp"
#include "pkey.hpp"
#include "public-key-der.hpp"
#include "error.hpp"

namespace crpt {

/**
 * @brief Provides OpenSSL Diffie-Hellman key exchange facilities
 */
class Exchange {
    private:
        PKeyContext context;
        PKey key;
        unsigned char* shared_secret = nullptr;
        size_t secret_len = 0;

    public:
        /**
         * @brief Construct a new Exchange instance with a Diffie-Hellman private key generated using a default shared-prime group. See man EVP_KEYEXCH-DH
         * 
         */
        Exchange();

        /**
         * @brief Construct a new Exchange instance with a Diffie-Hellman private key for some specified shared-prime group. See man EVP_KEYEXCH-DH
         * 
         * @param group The shared prime group to generate the Exchange local key with
         */
        Exchange(std::string group);

        Exchange(Exchange& exc) = delete;

        Exchange(Exchange&& exc) = delete;

        ~Exchange();

        Exchange& operator=(Exchange& exc) = delete;

        Exchange& operator=(Exchange&& exc) = delete;

        /**
         * @brief Derives a shared secret via Diffie-Hellman using the local key and the shared public key. See man EVP_KEYEXCH-DH
         * 
         * @param public_key The shared pubic key in DER format. See man i2d_PUBKEY & man d2i_PUBKEY
         * @return bool The success or failure of the derivation attempt.
         */
        bool derive_secret(PublicKeyDER& public_key);

        /**
         * @brief Get the public key in DER format of the local key generated by this Exchange instance (to share with a peer/host). See man i2d_PUBKEY & man d2i_PUBKEY
         * 
         * @return PublicKeyDER The public key.
         */
        PublicKeyDER get_public_key();

        /**
         * @brief Retrieve the shared secret generated by Exchange::derive_secret(). See man EVP_KEYEXCH-DH
         * 
         * @return std::string The shared secret
         */
        std::string get_secret();
};

}
#endif